#!/usr/bin/env python

'''Retrieve Gene Annotations for UniProt IDs in Tabular Blast Output.

This script will match Uniprot IDs from a tabular blast file against the
TrEMBL database to the gene names and annotations associated with that
Uniprot ID. This script requires a PARSED TrEMBL or SwissProt database
file generated by this script: Parse_UniProtDBs_datFile.py. If this file
is large, which it should be, this script will take an hour or so to run.

Requires PARSED TrEMBL or SwissProt databases currently located here:
/gpfs/pace2/project/bio-konstantinidis/rconrad6/dbases/uniprot_trembl.PARSED.dat.tsv
/gpfs/pace2/project/bio-konstantinidis/rconrad6/dbases/uniprot_sprot.PARSED.dat.tsv

or download from full fasta database from UniProt website and parse with
python script Parse_UniProtDBs_datFile.py

-------------------------------------------
Author :: Roth Conrad
Email :: rotheconrad@gatech.edu
GitHub :: https://github.com/rotheconrad
Date Created :: June 4th, 2019
License :: GNU GPLv3
Copyright 2019 Roth Conrad
All rights reserved
-------------------------------------------
'''

import argparse

def match_uniprotID_to_geneINFO(pt, tb, op):
    '''
    This function takes The PARSED UniProt database file in tsv format
    and a tabular blast output file.
    
    It matches the uniprot ID from the tab blast file with the gene
    annotation information from the PARSED UniProt database file.

    It returns a tsv file with columns ordered as
    [Query Gene Name, Uniprot ID, Long Gene Name, Short Gene Name, Annotations].
    '''

    # Initialize dict for blast info and counters
    d = {}
    dFound = {}
    tbCount = 0
    matchCount = 0
    idCount = 0

    # Read through blast file and build dictionary as:
    # 'Uniprot ID': 'Query Gene Name'
    print('Reading ', tb, ' file.')
    with open(tb, 'r') as b:
        for l in b:
            tbCount += 1
            X = l.rstrip().split('\t')
            qGeneName = X[0]
            uniprotID = X[1].split('|')[2]
            pMatch = X[2]
            aLength = X[3]
            qLength = X[12]
            sLength = X[13]

            if uniprotID in d:
                # append list of values
                d[uniprotID].append(
                                        [
                                        qGeneName,
                                        pMatch,
                                        aLength,
                                        qLength,
                                        sLength
                                        ]
                                    )

            else:
                d[uniprotID] = [
                                    [
                                    qGeneName,
                                    pMatch,
                                    aLength,
                                    qLength,
                                    sLength
                                    ]
                                ]

    # Read through PARSED TrEMBL database and write matches to output file
    print(
        'Finished reading ', tb, ' file. Reading ', pt, 
        ' file and writing output to ', op, ' file.'
        )

    with open(pt, 'r') as T, open(op, 'w') as o:

        column_names = (
            'Query_Gene_Name\tUniprot_ID\tPercent_Match\t'
            'Alignment_Length\tQuery_Length\tSubject_Length\t'
            'Long_Gene_Name\tShort_Gene_Name\tAnnotations\n'
            )

        o.write(column_names)

        for l in T:
            X = l.rstrip().split('\t')
            uniprotID = X[0]

            if uniprotID in d:

                idCount += 1
                dFound[uniprotID] = l

                for entry in d[uniprotID]:

                    annotation = '\t'.join(X[1:])
                    matchCount += 1
                    
                    lineOUT = (
                        f'{entry[0]}\t{uniprotID}\t{entry[1]}\t'
                        f'{entry[2]}\t{entry[3]}\t{entry[4]}\t{annotation}\n'
                        )

                    o.write(lineOUT)

    # Check to see if all blast matches found their match!
    print('Finished writing output. Double checking the work ...')
    for k,v in d.items():
        if k not in dFound:
            print(f'{k}: {v[0][0]}')
    
    print(
        'Script finished successfully. Wrote ', matchCount,
         'gene annotations of ', tbCount, ' blast entries from ', 
         idCount, ' UniProt IDs to ', op, ' file.'
         )

def main():

    # Configure Argument Parser
    import argparse
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter
        )
    parser.add_argument(
        '-p', '--parsed_uniprot_db',
        help='Please specify the PARSED UniProt database file!',
        required=True,
        metavar='',
        type=str,
        )
    parser.add_argument(
        '-b', '--tab_blast',
        help='Please specify the Tabular Blast Output file!',
        required=True,
        metavar='',
        type=str,
        )
    parser.add_argument(
        '-o', '--out_file',
        help='What would you like to call the new Output file? (.tsv)',
        required=True,
        metavar='',
        type=str,
        )
    args=vars(parser.parse_args())

    # Run this scripts main function
    print('Running Script...')
    match_uniprotID_to_geneINFO(
                            args['parsed_uniprot_db'],
                            args['tab_blast'],
                            args['out_file']
                            )

if __name__ == "__main__":
        main()
